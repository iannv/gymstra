# Generated by Django 5.2.3 on 2025-07-01 00:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id_clase', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('dias', models.CharField(max_length=255)),
                ('horario', models.CharField(max_length=255)),
                ('precio', models.FloatField()),
                ('cantidad_alumnos', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Clase',
                'verbose_name_plural': 'Clases',
                'db_table': 'Clases',
            },
        ),
        migrations.CreateModel(
            name='Ejercicio',
            fields=[
                ('id_ejercicio', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('nombre', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Ejercicio',
                'verbose_name_plural': 'Ejercicios',
                'db_table': 'Ejercicios',
            },
        ),
        migrations.CreateModel(
            name='ZonaMuscular',
            fields=[
                ('id_zona_muscular', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('zona', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Zona Muscular',
                'verbose_name_plural': 'Zonas Musculares',
                'db_table': 'Zonas Musculares',
            },
        ),
        migrations.CreateModel(
            name='Administrador',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_administrador', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('nombre', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=320, unique=True)),
                ('clave', models.CharField(max_length=50)),
                ('logo', models.ImageField(default='logos/default_logo.png', upload_to='logos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Administrador',
                'verbose_name_plural': 'Administradores',
                'db_table': 'Administradores',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Alumno',
            fields=[
                ('id_alumno', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('dni', models.CharField(max_length=8)),
                ('nombre', models.CharField(max_length=100)),
                ('apellido', models.CharField(max_length=100)),
                ('telefono', models.CharField(max_length=10)),
                ('fecha_ingreso', models.DateField()),
                ('vecesXsemana', models.IntegerField()),
                ('fecha_ultimo_dia', models.DateField()),
                ('activo', models.BooleanField(default=True)),
                ('id_administrador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('clase', models.ManyToManyField(to='api_gymstra.clase')),
            ],
            options={
                'verbose_name': 'Alumno',
                'verbose_name_plural': 'Alumnos',
                'db_table': 'Alumnos',
            },
        ),
        migrations.CreateModel(
            name='Asistencia',
            fields=[
                ('id_asistencia', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('fecha', models.DateField()),
                ('monto', models.FloatField()),
                ('id_alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_gymstra.alumno')),
                ('id_clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_gymstra.clase')),
            ],
            options={
                'verbose_name': 'Asistencia',
                'verbose_name_plural': 'Asistencias',
                'db_table': 'Asistencias',
            },
        ),
        migrations.CreateModel(
            name='Cuota',
            fields=[
                ('id_cuota', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('fecha_pago', models.DateField()),
                ('fecta_vto', models.DateField()),
                ('estado', models.BooleanField(default=False)),
                ('monto', models.FloatField()),
                ('id_alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_gymstra.alumno')),
            ],
            options={
                'verbose_name': 'Cuota',
                'verbose_name_plural': 'Cuotas',
                'db_table': 'Cuotas',
            },
        ),
        migrations.CreateModel(
            name='Rutina',
            fields=[
                ('id_rutina', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('nombre', models.CharField(max_length=100)),
                ('series', models.IntegerField()),
                ('repeticiones', models.IntegerField()),
                ('ejercicio', models.ManyToManyField(to='api_gymstra.ejercicio')),
            ],
            options={
                'verbose_name': 'Rutina',
                'verbose_name_plural': 'Rutinas',
                'db_table': 'Rutinas',
            },
        ),
        migrations.AddField(
            model_name='alumno',
            name='rutina',
            field=models.ManyToManyField(to='api_gymstra.rutina'),
        ),
        migrations.AddField(
            model_name='ejercicio',
            name='id_zona_muscular',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_gymstra.zonamuscular'),
        ),
    ]
